"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[892],{1862:(e,r,a)=>{a.r(r),a.d(r,{data:()=>t});const t={key:"v-47357bdb",path:"/zh/guide/",title:"介绍",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"zh/guide/README.md",git:{updatedTime:1629274839e3,contributors:[{name:"dlhtx",email:"949729789@qq.com",commits:1}]}}},4413:(e,r,a)=>{a.r(r),a.d(r,{default:()=>_});var t=a(6252);const n=(0,t._)("h1",{id:"介绍",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#介绍","aria-hidden":"true"},"#"),(0,t.Uk)(" 介绍")],-1),o=(0,t.Uk)("Swork插件基于"),d={href:"https://zeroing.jd.com/micro-app/docs.html#/zh-cn/start",target:"_blank",rel:"noopener noreferrer"},s=(0,t.Uk)("micro-app"),i=(0,t.Uk)("编写,相关文档可参照micro-app文档，swork插件对于此进行了一些更改，暴露出"),h=(0,t._)("code",null,"swork",-1),u=(0,t.Uk)("常用的api,store,和ui组件， 稍后我们将会为您详细的介绍它。"),l=(0,t._)("h1",{id:"它是如何工作的",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#它是如何工作的","aria-hidden":"true"},"#"),(0,t.Uk)(" 它是如何工作的？")],-1),c=(0,t._)("p",null,"正如上述所说，swork插件系统是基于微服务的，将 Web 应用由单一的单体应用转变为多个小型前端应用聚合为一的应用，各个前端应用还可以独立开发、独立运行、独立部署。微前端可以有效的解决项目越来越复杂而难以维护的问题。",-1),p=(0,t._)("p",null,"在构建时，程序会将组件转换为web-components标签插入dom列表中，通过CustomElement结合自定义的ShadowDom，将微前端封装成一个类WebComponent组件，从而实现微前端的组件化渲染。并且由于自定义ShadowDom的隔离特性，不需要像其他微服务框架一样要求子应用修改渲染逻辑并暴露出方法，也不需要修改webpack配置，是目前市面上接入微前端成本最低的方案。",-1),m=(0,t._)("h1",{id:"features",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#features","aria-hidden":"true"},"#"),(0,t.Uk)(" Features")],-1),k=(0,t._)("p",null,"iview",-1),_={render:function(e,r){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[n,(0,t._)("p",null,[o,(0,t._)("a",d,[s,(0,t.Wm)(a)]),i,h,u]),l,c,p,m,k],64)}}}}]);